#!/bin/bash

CC='[0m'
R1='[31;1m'
G1='[32;1m'
Y1='[33;1m'

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" > /dev/null && pwd )"
PYTHON='python3'
BRAINFUCK_TUNNEL="${DIR}/.brainfuck-tunnel"

BRAINFUCK_TUNNEL_APP="${BRAINFUCK_TUNNEL}/app.py"
BRAINFUCK_TUNNEL_SNI_SCANNER="${BRAINFUCK_TUNNEL}/sni-scanner.py"
BRAINFUCK_TUNNEL_DEFAULT_SETTINGS="${BRAINFUCK_TUNNEL}/default-settings.py"
BRAINFUCK_TUNNEL_RESET_TO_DEFAULT_SETTINGS="${BRAINFUCK_TUNNEL}/reset-to-default-settings.py"

BRAINFUCK_TUNNEL_APP_PID="${BRAINFUCK_TUNNEL}/storage/app.pid"
BRAINFUCK_TUNNEL_APP_LOG="${BRAINFUCK_TUNNEL}/storage/app.log"
BRAINFUCK_TUNNEL_ACCOUNT="${BRAINFUCK_TUNNEL}/database/account.json"
BRAINFUCK_TUNNEL_COMMAND_PYTHON="${BRAINFUCK_TUNNEL}/config/command-python.txt"

#
#

log()
{
    echo -e "$G1$2$1$CC"
}

logtime()
{
    log "[$( date +%T )] $1" $2
}

createfile()
{
    touch "$*" &> /dev/null
}

deletefile()
{
    rm -f "$*" &> /dev/null
}

readfile()
{
    createfile "$*"
    cat "$*"
}

readjson()
{
    cat "$1" | grep "\"$2\": " | awk -F '"' '{print $4}'
}

killpid()
{
    createfile "$1"
    while read pid; do kill $pid &> /dev/null; done < "$1"
    deletefile "$1"
    createfile "$1"
}

service()
{
    $* &> /dev/null & disown
}

stopscreen()
{
    echo "$2" >> "$1"
}

#
#

banner()
{
    log 'Brainfuck Tunnel [Rabbit Version 1.3.190310]'
    log '(c) 2019 Aztec Rabbit.'
}

is_running()
{
    if [[ ! -z $(readfile $BRAINFUCK_TUNNEL_APP_PID ) ]]; then running=1; else running=0; fi

    if [[ $1 == 'show' ]]; then
        case $running in
            0 )
                logtime 'Brainfuck not running.' $R1
            ;;

            1 )
                logtime 'Brainfuck is running'
            ;;
        esac
    fi

    return $running
}

start()
{
    local running; running=0 && is_running || running=1

    case $running in
        0 )
            deletefile $BRAINFUCK_TUNNEL_APP_LOG
            createfile $BRAINFUCK_TUNNEL_APP_LOG
            $PYTHON "$BRAINFUCK_TUNNEL_APP" &> /dev/null & disown
            tail -f "$BRAINFUCK_TUNNEL_APP_LOG" -n 0 | {
                while read line; do
                    if [[ -z "$line" ]]; then
                        echo; continue
                    fi

                    case $( echo "$line" | grep -E '\[[0-9:]{8}\] (Connected|Disconnected)' | awk -F ' ' '{print $2}') in
                        'Disconnected' )
                            stop false

                            stopscreen "$BRAINFUCK_TUNNEL_APP_LOG"
                            break
                        ;;

                        'Connected' )
                            log "$line"

                            # configurations iptables and redsocks here

                            stopscreen "$BRAINFUCK_TUNNEL_APP_LOG" "${G1}[$( date +%T )] Brainfuck running in the background"
                            break
                        ;;

                        * )
                            log "$line"
                        ;;
                    esac
                done
            }
        ;;

        1 )
            showlog; echo
            logtime 'Brainfuck is running!' $R1
        ;;
    esac
}

stop()
{
    local running; running=0 && is_running || running=1

    case $running in
        0 )
            if [[ -z $1 ]]; then
                logtime "Brainfuck not running!" $R1
            fi
        ;;

        1 )
            # configurations iptables and redsocks here

            killpid "$BRAINFUCK_TUNNEL_APP_PID"
            killall sshpass > /dev/null 2>&1

            if [[ -z $1 ]]; then
                logtime "Brainfuck stopped." $R1
            fi
        ;;
    esac
}

showlog()
{
    local running; running=0 && is_running || running=1

    case $running in
        0 )
            logtime "Brainfuck not running!" $R1
        ;;

        1 )
            while read line; do
                log "$line"
            done < "$BRAINFUCK_TUNNEL_APP_LOG"
        ;;
    esac
}

update()
{
    logtime 'Brainfuck update started'
    logtime 'Response:'
    echo; cd "$DIR"; git pull; echo
    logtime 'Brainfuck update stopped.'
}

reset_to_default_settings()
{
    logtime "Reseting to default settings"
    $PYTHON "$BRAINFUCK_TUNNEL_RESET_TO_DEFAULT_SETTINGS" &> /dev/null
    logtime "Reseting to default settings complete"
}

help()
{
    log 'Usage: brainfuck [start] [run] [connect] [stop] [disconnect]'
    log '                 [restart] [reconnect] [reset] [default]'
    log '                 [sni-scanner (hostname)] [log]'
    log '                 [status] [update]'
}

menu()
{
    clear; clear; banner

    echo
    case $1 in

        'start' | 'run' | 'connect' )
            start
        ;;

        'stop' | 'disconnect' )
            stop
        ;;

        'restart' | 'reconnect' )
            stop false; start
        ;;

        ##

        'reset' | 'default' )
            reset_to_default_settings
        ;;

        'log' )
            showlog
        ;;

        'status' )
            is_running show
        ;;

        'update' )
            update
        ;;

        ##

        'sni-scanner' )
            if [[ -z $2 ]]; then
                log 'Usage: brainfuck sni-scanner hostname'; echo
                return
            fi

            $PYTHON "$BRAINFUCK_TUNNEL_SNI_SCANNER" $2
        ;;

        'aztec-rabbit' )
            stop false && start && is_running || { clear; clear; banner; echo; update; stop false; bash $0; exit; }
        ;;

        * )
            help
        ;;

    esac
    echo
}

#
#

if [[ ! -z $(readfile $BRAINFUCK_TUNNEL_COMMAND_PYTHON ) ]]; then
    PYTHON=$(readfile $BRAINFUCK_TUNNEL_COMMAND_PYTHON | awk 'NR==1' | awk -F '\r' '{print $1}' )
fi

$PYTHON "$BRAINFUCK_TUNNEL_DEFAULT_SETTINGS"

# HOST=$( readjson "$BRAINFUCK_TUNNEL_ACCOUNT" host )
# PORT=$( readjson "$BRAINFUCK_TUNNEL_ACCOUNT" port )
# USERNAME=$( readjson "$BRAINFUCK_TUNNEL_ACCOUNT" username )
# PASSWORD=$( readjson "$BRAINFUCK_TUNNEL_ACCOUNT" password )
# SOCKPORT=$( readjson "$BRAINFUCK_TUNNEL_ACCOUNT" sockport )

if [[ $(id -u) -eq 0 ]]; then
    menu $*

else
    clear; banner

    echo
    logtime "PLease run \"sudo -s\" first!" ${R1}
    echo

fi
